#!/bin/sh

set -e

BOOTSTRAP_DIR=/var/lib/appliance-setup
BOOTSTRAP_STAMP_FILE=$BOOTSTRAP_DIR/bootstrap-stamp
VERSION_FILE=/etc/appliance-setup-version

usage()
{
cat <<EOF >&2
usage: $0 <command>

Commands
apply:   configure the appliance
help:    display usage information
update:  fetch the latest version of the appliance-setup repository
version: display repository version
EOF
}

bootstrap()
{
	if [ ! -d "$BOOTSTRAP_DIR" ]; then
		mkdir -p "$BOOTSTRAP_DIR"
	fi

	if [ ! -f "$BOOTSTRAP_STAMP_FILE" ]; then
		cat <<EOF >/etc/apt/sources.list.d/puppetlabs.list
deb http://apt.puppetlabs.com/ squeeze main
deb-src http://apt.puppetlabs.com/ squeeze main
EOF

		apt-key adv --keyserver keyserver.ubuntu.com --recv 4BD6EC30
		apt-get update

		# Install the latest version of Puppet
		apt-get -y install facter hiera-puppet puppet

		# Create local configuration file

		# Ensure file exists and has restrictive permissions
		touch puppet/etc/hieradb/local.yaml
		chmod 600 puppet/etc/hieradb/local.yaml

		# Add commented out default configuration if local file is empty
		if [ ! -s puppet/etc/hieradb/local.yaml ]; then
			sed 's/^/#/' puppet/etc/hieradb/common.yaml > puppet/etc/hieradb/local.yaml
		fi
	fi

	date > "$BOOTSTRAP_STAMP_FILE"
}

run_puppet_apply()
{
	cd puppet
	puppet apply --confdir etc site.pp "$@"
}

print_version()
{
	git_branch=$(git symbolic-ref -q HEAD | sed 's;refs/heads/;;')
	if [ "$git_branch" = "master" ]; then
		git describe --dirty --long --always
	else
		git_last_tag=$(git describe --abbrev=0)
		git describe --dirty --long --always | sed "s/$git_last_tag/$git_branch/"
	fi
}


script_base_dir=$(cd "$(dirname "$0")"/.. && pwd)
cd "$script_base_dir"

if [ -n "$1" ]; then
	command=$1
	shift
else
	command=help
fi

case "$command" in
apply)
	bootstrap
	run_puppet_apply
	print_version > "$VERSION_FILE"
	;;
bootstrap)
	# Force a bootstrap
	rm -f "$BOOTSTRAP_STAMP_FILE"
	bootstrap
	;;
help)
	usage
	;;
puppet)
	run_puppet_apply "$@"
	;;
update)
	git fetch
	git reset --hard @{u}
	git submodule update --init
	;;
version)
	print_version
	;;
*)
	echo "Invalid command: $command"
esac
